<h1>
  <%= @algorithm.title %>
  <small>
    <%= link_to ' | edit', edit_algorithm_path(@algorithm) %>
    <%= link_to ' | destroy', @algorithm, method: :delete, data: { confirm: 'Are you sure?' } %>
  </small>
</h1>

<% if !notice.blank? %>
  <p id="notice" class="alert alert-success"><%= notice %></p>
<% end %>

<h2>Basic Information</h2>

<p>
  <strong>Title:</strong>
  <%= @algorithm.title %>
</p>

<p>
  <strong>Description:</strong>
  <%= @algorithm.description %>
</p>

<p>
  <strong>Author:</strong>
  <%= @algorithm.author %>
</p>

<p>
  <strong>Time complexity:</strong>
  <%= @algorithm.time_complexity %>
</p>

<p>
  <strong>Space complexity:</strong>
  <%= @algorithm.space_complexity %>
</p>

<p>
  <strong>Used in projects:</strong>
  <ul class="list-group">
    <% @projects.each do |project| %>
      <li>
        <%= link_to project.title, project_path(project.id), class:"list-group-item" %>
      </li>
    <% end %>
  </ul>
</p>

<div style="margin-top: 20px;" class="row col-xs-12">

  <div class="col-xs-6" style="padding-left: 0; border-right: 1px solid #aaa;"">
    <h2>Algorithm's suscripts</h2>
    <table  class="table table-striped">
      <thead>
        <tr>
          <th>Title</th>
          <th>Author</th>
          <th>Filename</th>
          <th colspan="2"></th>
        </tr>
      </thead>

      <tbody>
        <% @subscripts.each do |subscript| %>
          <tr>
            <td><%= subscript.title %></td>
            <td><%= subscript.author %></td>
            <td><%= link_to subscript.filename, download_subscript_path(subscript.id), target: "_blank" %></td>
            <td><%= link_to 'Edit', edit_subscript_path(subscript) %></td>
            <td><%= link_to 'Destroy', subscript, method: :delete, data: { confirm: 'Are you sure?' } %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>

  <div class="col-xs-6">
    <h2 style="margin-bottom: 20px;">Upload new Subscript</h2>
    <%= render 'subscripts/form', subscript: @subscript %>
  </div>

</div>

<div class="row col-xs-12" style="margin-top: 50px;">

  <div class="col-xs-6" style="padding-left: 0; border-right: 1px solid #aaa;">
    <h2>Algorithm's Subscript Dependency</h2>

    <table  class="table table-striped">
      <thead>
        <tr>
          <th>Parent Script</th>
          <th>Child Script</th>
          <th colspan="2"></th>
        </tr>
      </thead>

      <tbody>
        <% @subscriptDependencies.each do |dependency| %>
          <tr>
            <td><%= dependency.parent_script.title %></td>
            <td><%= dependency.child_script.title %></td>
            <td><%= link_to 'Edit', edit_subscript_dependency_path(dependency) %></td>
            <td><%= link_to 'Destroy', dependency, method: :delete, data: { confirm: 'Are you sure?' } %></td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>

  <div class="col-xs-6">
    <h2 style="margin-bottom: 20px;">Add new Dependency</h2>
    <%= render 'subscript_dependencies/form', subscript_dependency: @subscriptDependency %>
  </div>

<div class="row col-xs-12" style="margin-top: 20px; margin-bottom: 30px;">

  <div style="padding-left: 0;" class="col-xs-3">

    <h2 style="margin-bottom: 30px;"">Current Key Figures</h2>

    <ul class="list-group">
      <li class="list-group-item active">
        <strong>General</strong>
      </li>
      <li class="list-group-item">
        Finished
        <span class="label <%= @algorithm.finished? ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.finished? ? "Yes" : "No" %>
        </span>
      </li>
      <li class="list-group-item">
        Successfully finished
        <span class="label <%= @algorithm.finishedSuccessfully? ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.finishedSuccessfully? ? "Yes" : "No" %>
        </span>
      </li>
      <li class="list-group-item">
        Pending
        <span class="label <%= !@algorithm.pending? ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.pending? ? "Yes" : "No" %>
        </span>
      </li>
      <li class="list-group-item">
        Partially failed
        <span class="label <%= !@algorithm.failedInParts? ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.failedInParts? ? "Yes" : "No" %>
        </span>
      </li>
      <li class="list-group-item active">
        <strong>Subscripts</strong>
      </li>
      <li class="list-group-item">
        Total
        <span class="label label-default pull-right">
          <%= @algorithm.amoutOfSubscripts %>
        </span>
      </li>
      <li class="list-group-item">
        Succeeded
        <span class="label label-default pull-right">
          <%= @algorithm.amoutOfSucceededSubscripts %>
        </span>
      </li>
      <li class="list-group-item">
        Failed
        <span class="label <%= @algorithm.amoutOfFailedSubscripts <= 0 ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.amoutOfFailedSubscripts %>
        </span>
      </li>
      <li class="list-group-item">
        Pending
        <span class="label <%= @algorithm.amountOfPendingSubscripts <= 0 ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.amountOfPendingSubscripts %>
        </span>
      </li>
      <li class="list-group-item">
        Running
        <span class="label <%= @algorithm.amoutOfRunningSubscripts <= 0 ? 'label-success' : 'label-danger' %> pull-right">
          <%= @algorithm.amoutOfRunningSubscripts %>
        </span>
      </li>
    </ul>

  </div>

  <div class="col-xs-9" style="border-left: 1px solid #aaa;">
    <h2>Dependency Tree</h2>
    <div id="graph"></div>
  </div>

</div>
<script type="text/javascript">
  $(document).ready(function(){

    /* Testing data */

    var nodes = [
      {name: "Read Data", x: 300, y: 100},
      {name: "Preprocessing 1", x: 100, y: 200},
      {name: "Preprocessing 2", x: 500, y: 200},
      {name: "Classifier 1", x: 100, y: 300},
      {name: "Classifier 2", x: 500, y: 300},
      {name: "Evaluation", x: 300, y: 400},
      {name: "Save Results", x: 300, y: 500}
    ];

    var links = [
      {source: nodes[0], target: nodes[1]},
      {source: nodes[0], target: nodes[2]},
      {source: nodes[1], target: nodes[3]},
      {source: nodes[2], target: nodes[3]},
      {source: nodes[1], target: nodes[4]},
      {source: nodes[2], target: nodes[4]},
      {source: nodes[3], target: nodes[5]},
      {source: nodes[4], target: nodes[5]},
      {source: nodes[5], target: nodes[6]}
    ];

    /* Testing data will be overwriten here by requesting current dependencies between subscript*/

    $.post("/get_algorithm_subscript_dependencies",{id: <%= @algorithm.id %>},
      function(dependenciesData){
        links = dependenciesData;
        initializeGraph();
    });

    /* draw graph after successful json repsonse, which contains links data */

    function initializeGraph(){
      var nodes = {};

      // Compute the distinct nodes from the links
      links.forEach(function(link) {
        link.source = nodes[link.source.name] || (nodes[link.source.name] = {name: link.source.name});
        link.target = nodes[link.target.name] || (nodes[link.target.name] = {name: link.target.name});
      });

      var width = 800, height = 600;

      var force = d3.layout.force()
      .nodes(d3.values(nodes))
      .links(links)
      .size([width, height])
      .linkDistance(50)
      .charge(-5000)
      .on("tick", tick)
      .start();

      var svg = d3.select("#graph").append("svg")
          .attr("width", width)
          .attr("height", height);

      // Per-type markers, as they don't inherit styles.
      svg.append("defs").selectAll("marker")
          .data(["suit"])
        .enter().append("marker")
          .attr("id", function(d) { return d; })
          .attr("viewBox", "0 -5 10 10")
          .attr("refX", 23)
          .attr("refY", -1.5)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
        .append("path")
          .attr("d", "M0,-5L10,0L0,5");

      var path = svg.append("g").selectAll("path")
          .data(force.links())
        .enter().append("path")
          .attr("class", function(d) { return "link " + d.type; })
          .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

      var circle = svg.append("g").selectAll("circle")
          .data(force.nodes())
        .enter().append("circle")
          .attr("r", 12)
          .call(force.drag);

      var text = svg.append("g").selectAll("text")
          .data(force.nodes())
        .enter().append("text")
          .attr("x", 8)
          .attr("y", ".31em")
          .text(function(d) { return d.name; });

      // Use elliptical arc path segments to doubly-encode directionality.
      function tick() {
        path.attr("d", linkArc);
        circle.attr("transform", transform);
        text.attr("transform", transform);
      }

      function linkArc(d) {
        var dx = d.target.x - d.source.x,
            dy = d.target.y - d.source.y,
            dr = Math.sqrt(dx * dx + dy * dy);
        return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
      }

      function transform(d) {
        return "translate(" + d.x + "," + d.y + ")";
      }
    }

  });
</script>